package storage

import (
	"fmt"
	"strconv"
)

// Storage

func InitStorage() MemStorage {
	var ms MemStorage
	ms.Counters = newMetricInt64()
	ms.Gauges = newMetricFloat64Slice()
	return ms
}

type MemStorage struct {
	Gauges   metricFloat64Slice
	Counters metricInt64
}

// Float64Slice

type metricFloat64Slice struct {
	data map[string][]float64
}

func newMetricFloat64Slice() metricFloat64Slice {
	var v metricFloat64Slice
	v.data = make(map[string][]float64)
	return v
}

func (this metricFloat64Slice) WriteData(key string, value string) error {
	v, err := strconv.ParseFloat(value, 64)

	if err == nil {
		if _, keyExist := this.data[key]; !keyExist {
			this.data[key] = make([]float64, 0)
			println("Created key: " + key)
		}
		this.data[key] = append(this.data[key], v)
		println("Slice " + key + " of length " + fmt.Sprintf("%d", len(this.data[key])))
	}
	return err
}

// Int64

type metricInt64 struct {
	data map[string]int64
}

func (this metricInt64) WriteData(key string, value string) error {

	v, err := strconv.ParseInt(value, 10, 64)

	if err == nil {
		this.data[key] = v
	}

	v2, exist := this.data[key]
	if exist {
		println("Value of " + key + " is " + fmt.Sprintf("%d", v2))
	}
	return err
}

func newMetricInt64() metricInt64 {
	var v metricInt64
	v.data = make(map[string]int64)
	return v
}
